version: 2.1
executors:
  deploy_container:
    docker:
      - image: circleci/python:3.8.7
    working_directory: ~/work

orbs:
  aws-cli: circleci/aws-cli@3.1.1
  ansible-playbook: orbss/ansible-playbook@0.0.5

jobs:
  execute-cloudformation:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_DEFAULT_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: deploy Cloudformation
          command: |
            set -x
            aws cloudformation deploy --stack-name NetworkStackFromCircleCI --template-file cloudformation/Network_template.yml
            aws cloudformation deploy --stack-name EC2andALBSecurityGroupStackFromCircleCI --template-file cloudformation/EC2andALBSG_template.yml
            aws cloudformation deploy --stack-name RDSSecurityGroupStackFromCircleCI --template-file cloudformation/RDSSG_template.yml
            aws cloudformation deploy --stack-name EC2andS3StackFromCircleCI --template-file cloudformation/EC2_S3_template.yml          
            aws cloudformation deploy --stack-name RDSStackFromCircleCI --template-file cloudformation/RDS_template.yml
            aws cloudformation deploy --stack-name ALBFromCircleCI --template-file cloudformation/ALB_template.yml

      - run:
          name: output rds endpoint
          command: |
            var1=$(aws cloudformation describe-stacks --region ap-northeast-1 --stack-name RDSStackFromCircleCI --query "Stacks[].Outputs[].[OutputValue]" --output text)
            echo 'rds_endpoint: '{$var1} > env.txt
      
      - store_artifacts:
        path: env.txt
      
                no_o  path: 

          no_output_timeout: 15m
  execute-ansible:
    executor: ansible-playbook/default
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 7f:fc:97:1b:2f:8c:d6:53:e5:02:ef:35:c9:3d:c2:e0""
      - ansible-playbook/install:
          version: 2.10.7
      - ansible-playbook/playbook:
          playbook: ansible/playbook.yml
          playbook-options: -u ec2-user -i ansible/inventory --private-key ~/.ssh/id_rsa --tags="database"
  





workflows:
  raisetech-task-final:
    jobs:
      - execute-cloudformation
      - execute-ansible:
          requires:
            - "execute-cloudformation"